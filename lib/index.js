"use strict";

var _slice = Array.prototype.slice;
var _applyConstructor = function (Constructor, args) {
  var instance = Object.create(Constructor.prototype);

  var result = Constructor.apply(instance, args);

  return result != null && (typeof result == "object" || typeof result == "function") ? result : instance;
};

var _toArray = function (arr) {
  return Array.isArray(arr) ? arr : Array.from(arr);
};

exports.generateTree = generateTree;
exports.generate = generate;
var isValid = require("shift-validator")["default"];
var Shift = require("shift-ast");

var codeGen = require("shift-codegen")["default"];


var identifierStart = "_$abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
var identifierPart = identifierStart + "0123456789";

var MANY_BOUND = 5;
var MAX_IDENT_LENGTH = 15;
var MAX_STRING_LENGTH = 3;

var R = (function () {
  var R = function R(rng) {
    this.rng = rng;
  };

  R.prototype.nextBoolean = function () {
    return this.rng() * 2 > 1;
  };

  R.prototype.nextInt = function (bound) {
    return Math.floor(this.rng() * bound);
  };

  R.prototype.nextDouble = function () {
    return this.rng();
  };

  return R;
})();

function e(gen1, gen2) {
  return function (rng, depth) {
    return rng.nextBoolean() ? gen1(rng, depth) : gen2(rng, depth);
  };
}


function ap(f) {
  var g1 = _slice.call(arguments, 1);

  return function (rng, depth) {
    return _applyConstructor(f, _toArray((g1.map(function (g) {
      return g(rng, depth - 1);
    }))));
  };
}

function manyB(bound, gen) {
  return function (rng, depth) {
    if (depth <= 0) {
      return [];
    }
    var number = rng.nextInt(bound);
    var result = [];
    for (var i = 0; i < number; i++) {
      result.push(gen(rng, depth));
    }
    return result;
  };
}

function many(gen) {
  return manyB(MANY_BOUND, gen);
}

function many1(gen) {
  return function (rng, depth) {
    return manyB(MANY_BOUND - 1, gen)(rng, depth).push(gen(rng, depth));
  };
}

function op(gen) {
  return function (rng, depth) {
    return depth <= 0 || rng.nextBoolean() ? null : gen(rng, depth);
  };
}

function choice() {
  var arr = _slice.call(arguments);

  return function (rng, depth) {
    return arr[rng.nextInt(arr.length)];
  };
}

function among() {
  var arr = _slice.call(arguments);

  return function (rng, depth) {
    var n = rng.nextInt(arr.length);
    return arr[n](rng, depth);
  };
}

var genString = function (rng, depth) {
  var length = rng.nextInt(MAX_STRING_LENGTH);
  return Array.apply([], new Array(length)).map(function () {
    return String.fromCharCode(rng.nextInt(127 - 20) + 20);
  }).join("");
};

var genIdentifierString = function (rng, depth) {
  var result = "";
  result += identifierStart[rng.nextInt(identifierStart.length)];
  var length = rng.nextInt(MAX_IDENT_LENGTH);
  for (var i = 0; i < length; i++) {
    result += identifierPart[rng.nextInt(identifierPart.length)];
  }
  return result.toString();
};

function map(f1, f2) {
  return function () {
    var args = _slice.call(arguments);

    return f2(f1.apply(null, _toArray(args)));
  };
}

var genRegExpString = map(genIdentifierString, (function (s) {
  return "/" + s + "/";
}));
var genNumber = function (rng, depth) {
  return Math.exp(rng.nextDouble());
};
var genFunctionBody = ap(Shift.FunctionBody, many(genDirective), many(genStatement));
var genIdentifier = ap(Shift.Identifier, genIdentifierString);
var genPropertyNameString = ap(Shift.PropertyName, function () {
  return "string";
}, genString);
var genPropertyNameIdent = ap(Shift.PropertyName, function () {
  return "identifier";
}, map(genIdentifier, function (x) {
  return x.name;
}));
var genPropertyNameNumber = ap(Shift.PropertyName, function () {
  return "number";
}, map(genNumber, function (x) {
  return x.toString();
}));
var genPropertyName = among(genPropertyNameString, genPropertyNameIdent, genPropertyNameNumber);
var genDataProperty = ap(Shift.DataProperty, genPropertyName, genExpression);
var genGetter = ap(Shift.Getter, genPropertyName, genFunctionBody);
var genSetter = ap(Shift.Setter, genPropertyName, genIdentifier, genFunctionBody);
var genObjectProperty = among(genDataProperty, genGetter, genSetter);
var genBlock = ap(Shift.Block, many(genStatement));
var genVariableDeclarator = ap(Shift.VariableDeclarator, genIdentifier, op(genExpression));
var genVariableDeclaration = ap(Shift.VariableDeclaration, choice("let", "var"), many1(genVariableDeclarator));
var genSwitchCase = ap(Shift.SwitchCase, genExpression, many(genStatement));
var genSwitchDefault = ap(Shift.SwitchDefault, many(genStatement));
var genCatchClause = ap(Shift.CatchClause, genIdentifier, genBlock);
var genUnknownDirective = ap(Shift.UnknownDirective, genString);
var genUseStrictDirective = ap(Shift.UseStrictDirective);
var genArrayExpression = ap(Shift.ArrayExpression, many(op(genExpression)));
var genAssignmentExpression = ap(Shift.AssignmentExpression, choice("=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "|=", "^=", "&="), genExpression, genExpression);
var genBinaryExpression = ap(Shift.BinaryExpression, choice("==", "!=", "===", "!==", "<", "<=", ">", ">=", "in", "instanceof", "<<", ">>", ">>>", "+", "-", "*", "/", "%", ",", "||", "&&", "|", "^", "&"), genExpression, genExpression);
var genCallExpression = ap(Shift.CallExpression, genExpression, many(genExpression));
var genComputedMemberExpression = ap(Shift.ComputedMemberExpression, genExpression, genExpression);
var genConditionalExpression = ap(Shift.ConditionalExpression, genExpression, genExpression, genExpression);
var genFunctionExpression = ap(Shift.FunctionExpression, op(genIdentifier), many(genIdentifier), genFunctionBody);
var genIdentifierExpression = ap(Shift.IdentifierExpression, genIdentifier);
var genLiteralBooleanExpression = ap(Shift.LiteralBooleanExpression, choice(true, false));
var genLiteralNullExpression = ap(Shift.LiteralNullExpression);
var genLiteralNumericExpression = ap(Shift.LiteralNumericExpression, genNumber);
var genLiteralInfinityExpression = ap(Shift.LiteralInfinityExpression);
var genLiteralRegExpExpression = ap(Shift.LiteralRegExpExpression, genRegExpString);
var genLiteralStringExpression = ap(Shift.LiteralStringExpression, genString);
var genNewExpression = ap(Shift.NewExpression, genExpression, many(genExpression));
var genObjectExpression = ap(Shift.ObjectExpression, many(genObjectProperty));
var genPostfixExpression = ap(Shift.PostfixExpression, genExpression, choice("++", "--"));
var genPrefixExpression = ap(Shift.PrefixExpression, choice("+", "-", "!", "~", "typeof", "void", "delete", "++", "--"), genExpression);
var genStaticMemberExpression = ap(Shift.StaticMemberExpression, genExpression, genIdentifier);
var genThisExpression = ap(Shift.ThisExpression);
var genBlockStatement = ap(Shift.BlockStatement, genBlock);
var genDebuggerStatement = ap(Shift.DebuggerStatement);
var genDoWhileStatement = ap(Shift.DoWhileStatement, genStatement, genExpression);
var genEmptyStatement = ap(Shift.EmptyStatement);
var genExpressionStatement = ap(Shift.ExpressionStatement, genExpression);
var genForInStatement = ap(Shift.ForInStatement, e(genVariableDeclaration, genExpression), genExpression, genStatement);
var genForStatement = ap(Shift.ForStatement, op(e(genVariableDeclaration, genExpression)), op(genExpression), op(genExpression), genStatement);
var genFunctionDeclaration = ap(Shift.FunctionDeclaration, genIdentifier, many(genIdentifier), genFunctionBody);
var genIfStatement = ap(Shift.IfStatement, genExpression, genStatement, op(genStatement));
var genSwitchStatement = ap(Shift.SwitchStatement, genExpression, many(genSwitchCase));
var genSwitchStatementWithDefault = ap(Shift.SwitchStatementWithDefault, genExpression, many(genSwitchCase), genSwitchDefault, many(genSwitchCase));
var genThrowStatement = ap(Shift.ThrowStatement, genExpression);
var genTryCatchStatement = ap(Shift.TryCatchStatement, genBlock, genCatchClause);
var genTryFinallyStatement = ap(Shift.TryFinallyStatement, genBlock, op(genCatchClause), genBlock);
var genVariableDeclarationStatement = ap(Shift.VariableDeclarationStatement, genVariableDeclaration);
var genWhileStatement = ap(Shift.WhileStatement, genExpression, genStatement);
var genWithStatement = ap(Shift.WithStatement, genExpression, genStatement);
var genScript = ap(Shift.Script, genFunctionBody);
var genExpressionList = among(genArrayExpression, genAssignmentExpression, genBinaryExpression, genCallExpression, genComputedMemberExpression, genConditionalExpression, genFunctionExpression, genIdentifierExpression, genLiteralBooleanExpression, genLiteralNullExpression, genLiteralNumericExpression, genLiteralInfinityExpression, genLiteralRegExpExpression, genLiteralStringExpression, genNewExpression, genObjectExpression, genPostfixExpression, genPrefixExpression, genStaticMemberExpression, genThisExpression);
var genZeroLengthExpressionList = among(genArrayExpression, genIdentifierExpression, genLiteralBooleanExpression, genLiteralNullExpression, genLiteralNumericExpression, genLiteralInfinityExpression, genLiteralRegExpExpression, genLiteralStringExpression, genThisExpression);
var genDirectiveList = among(genUnknownDirective, genUseStrictDirective);
var genStatementList = among(genBlockStatement, genDebuggerStatement, genDoWhileStatement, genEmptyStatement, genExpressionStatement, genForInStatement, genForStatement, genFunctionDeclaration, genIfStatement, genSwitchStatement, genSwitchStatementWithDefault, genThrowStatement, genTryCatchStatement, genTryFinallyStatement, genVariableDeclarationStatement, genWhileStatement, genWithStatement);

function genExpression(random, depth) {
  return (depth <= 0 ? genZeroLengthExpressionList : genExpressionList)(random, depth);
}

function genDirective(random, depth) {
  return genDirectiveList(random, depth);
}

function genStatement(random, depth) {
  return genStatementList(random, depth);
}

function generateTree(rng, depth) {
  var r = new R(rng);
  do {
    var tree = genScript(r, depth);
    if (isValid(tree)) {
      return tree;
    }
  } while (true);
}

function generate(rng, depth) {
  return codeGen(generateTree(rng, depth));
}
//# sourceMappingURL=data:application/json;base64,